一、创建版本库
1.git init
将当前目录变成git可以管理的仓库
2.把文件添加到版本库
	注：不要使用windows自带的记事本编辑文本文件，其UTF-8编码会在每个文件开头添加0xEFBBBF
git add <filename>
	将文件添加到仓库中
git commit -m <message>
	将文件提交到仓库(可一次提交多个文件)
	
二、时光机穿梭
1.git status
	查看仓库当前状态
2.git diff
	查看与上一个commit的不同之处

版本回退
1.git log
	查看从最近到最远的提交日志
	如果输出信息太多，可加上参数 --pretty=oneline
	显示commit id等信息，可以使用可视化工具更清楚地查看
2.版本表示
	HEAD表示当前版本，上一个版本是HEAD^，再上一个版本就是HEAD^^
	往上100个版本是HEAD~100
3.git reset --hard HEAD^
	回退到上一个版本
4.git reflog
	记录每一次命令，用于查询之前的操作，找到回退前的版本
	
工作区和暂存区
1.工作区Working Directory
	电脑中能看到的目录
2.版本库Repository
	工作区中的隐藏目录.git 
	Git的版本库中保存了很多东西，其中最重要的就是  暂存区Stage(或Index)
	git add 实际上就是把文件修改添加到暂存区
	git commit 实际上就是把暂存区的所有内容提交到当前分支
	
撤销修改
1.git checkout -- <filename>
	将文件在<工作区>的修改全部撤销，分两种情况
	1修改后还未添加到暂存区，此时撤销修改就回到和版本库一样的状态
	2已经添加到暂存区后又进行了修改，此时撤销修改就回到添加到暂存区后的状态
	总结：让该文件回到最近一次git commit或git add的状态

2.git reset HEAD <filename>
	将暂存区的修改撤销，重新放回工作区
	使用该命令后，暂存区clean，工作区有修改
	此时再丢弃<工作区>的修改
	
删除文件
1.git rm <filename>
2.git checkout -- <filename>
	撤销删除
	
三、远程仓库
添加远程仓库
1.git remote origin <git@github.com:<username>/<repository-name>>
	关联远程库，名称为origin
2.git push (-u) origin master
	将master分支推送到远程origin仓库
	-u参数会将本地的master分支和远程库的master分支关联
	
克隆远程仓库
1.git clone <git@github.com:<username>/<repository-name>.git>