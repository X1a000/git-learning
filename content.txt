一、创建版本库
1.git init
将当前目录变成git可以管理的仓库
2.把文件添加到版本库
	注：不要使用windows自带的记事本编辑文本文件，其UTF-8编码会在每个文件开头添加0xEFBBBF
git add <filename>
	将文件添加到仓库中
git commit -m <message>
	将文件提交到仓库(可一次提交多个文件)
	
二、时光机穿梭
1.git status
	查看仓库当前状态
2.git diff
	查看与上一个commit的不同之处

版本回退
1.git log
	查看从最近到最远的提交日志
	如果输出信息太多，可加上参数 --pretty=oneline
	显示commit id等信息，可以使用可视化工具更清楚地查看
2.版本表示
	HEAD表示当前版本，上一个版本是HEAD^，再上一个版本就是HEAD^^
	往上100个版本是HEAD~100
3.git reset --hard HEAD^
	回退到上一个版本
4.git reflog
	记录每一次命令，用于查询之前的操作，找到回退前的版本
	
工作区和暂存区
1.工作区Working Directory
	电脑中能看到的目录
2.版本库Repository
	工作区中的隐藏目录.git 
	Git的版本库中保存了很多东西，其中最重要的就是  暂存区Stage(或Index)
	git add 实际上就是把文件修改添加到暂存区
	git commit 实际上就是把暂存区的所有内容提交到当前分支
	
撤销修改
1.git checkout -- <filename>
	将文件在<工作区>的修改全部撤销，分两种情况
	1修改后还未添加到暂存区，此时撤销修改就回到和版本库一样的状态
	2已经添加到暂存区后又进行了修改，此时撤销修改就回到添加到暂存区后的状态
	总结：让该文件回到最近一次git commit或git add的状态

2.git reset HEAD <filename>
	将暂存区的修改撤销，重新放回工作区
	使用该命令后，暂存区clean，工作区有修改
	此时再丢弃<工作区>的修改
	
删除文件
1.git rm <filename>
2.git checkout -- <filename>
	撤销删除
	
三、远程仓库

添加远程仓库
1.git remote origin <git@github.com:<username>/<repository-name>>
	关联远程库，名称为origin
2.git push (-u) origin master
	将master分支推送到远程origin仓库
	-u参数会将本地的master分支和远程库的master分支关联
	
克隆远程仓库
1.git clone <git@github.com:<username>/<repository-name>.git>


四、分支管理

创建与合并分支
1.git checkout -b <branch-name>
	-b参数表示创建并切换分支
	相当于以下两条命令：
	①git branch dev
	②git checkout dev
2.git branch
	查看当前分支
3.git merge <branch-name>
	合并指定分支到当前分支
4.git branch -d <branch-name>
	删除指定分支

更科学的切换分支命令
1.git switch -c <branch-name>
	创建并切换至指定分支
2.git switch <branch-name>
	切换分支
	
解决冲突
	两个分支有冲突的提交时，需要手动解决后再合并
1.git log --graph
	查看分支合并图
	
分支管理策略
1.git merge --no-ff -m <message> <branch-name>
	--no-ff参数，表示禁用Fast forward,即merge时会生成一个新的commit
2.实际开发中的分支管理基本原则：
	master分支应该是非常为稳定的，只用来发布新版本，平时不在master上干活
	平时应在其他分支上干活，在发布新版本时再合并到master上去

BUG分支
1.每个BUG都可以通过一个新的临时分支来修复，修复后合并分支并将临时分支删除
2.在工作过程中临时接到bug修复任务，无法commit时，使用stash将当前工作现场存储起来，等以后恢复现场继续工作
	git stash
3.之后，首先确认在哪个分支上修复bug，就从哪个分支上创建临时分支。假设在master上进行修复：
	git checkout master //切换到master分支
	git checkout -b issue-101	//在master分支上创建并切换到issue-101分支
	
	git add ......
	git commit ......//修复bug
	
	git switch master //切换回master分支
	git merge --no-ff -m "merged bug fix 101" issue-101 //完成合并
	
	git switch dev //切换回工作分支
	git stash list //查看之前保存的工作现场
	
	git stash apply <stash-name>//恢复工作现场，但不删除stash
	git stash drop <stash-name>//删除stash
	git stash pop <stash-name>//恢复工作现场，同时删除stash
	
4.假设dev分支是早期从master分支上分出来的，若dev存在和master同样的bug，可以将之前提交的修复bug的修改复制到dev分支上
	即复制一次commit
	git cherry-pick <commit-id>
	
多人协作
1.git remote 
	查看远程库信息，使用git remote -v查看更详细信息
2.git push origin <branch-name>
	推送分支


Rebase
1.git rebase 
	将分叉的提交历史整理成一条直线